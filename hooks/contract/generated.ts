// Generated by @wagmi/cli@1.3.0 on 2/11/2024 at 1:44:24 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RPS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rpsABI = [
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_c1', type: 'uint8' },
      { name: '_c2', type: 'uint8' },
    ],
    name: 'win',
    outputs: [{ name: 'w', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'j2Timeout',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stake',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'c2',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'c1Hash',
    outputs: [{ name: '', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_c2', type: 'uint8' }],
    name: 'play',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'j2',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastAction',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_c1', type: 'uint8' },
      { name: '_salt', type: 'uint256' },
    ],
    name: 'solve',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'j1',
    outputs: [{ name: '', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'j1Timeout',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'TIMEOUT',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    payable: true,
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: '_c1Hash', type: 'bytes32' },
      { name: '_j2', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__.
 */
export function useRpsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: rpsABI, ...config } as UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"win"`.
 */
export function useRpsWin<TFunctionName extends 'win', TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: rpsABI, functionName: 'win', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"stake"`.
 */
export function useRpsStake<
  TFunctionName extends 'stake',
  TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: rpsABI, functionName: 'stake', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"c2"`.
 */
export function useRpsC2<TFunctionName extends 'c2', TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: rpsABI, functionName: 'c2', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"c1Hash"`.
 */
export function useRpsC1Hash<
  TFunctionName extends 'c1Hash',
  TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: rpsABI, functionName: 'c1Hash', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"j2"`.
 */
export function useRpsJ2<TFunctionName extends 'j2', TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: rpsABI, functionName: 'j2', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"lastAction"`.
 */
export function useRpsLastAction<
  TFunctionName extends 'lastAction',
  TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: rpsABI, functionName: 'lastAction', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"j1"`.
 */
export function useRpsJ1<TFunctionName extends 'j1', TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: rpsABI, functionName: 'j1', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"TIMEOUT"`.
 */
export function useRpsTimeout<
  TFunctionName extends 'TIMEOUT',
  TSelectData = ReadContractResult<typeof rpsABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof rpsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: rpsABI, functionName: 'TIMEOUT', ...config } as UseContractReadConfig<
    typeof rpsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rpsABI}__.
 */
export function useRpsWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof rpsABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof rpsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof rpsABI, TFunctionName, TMode>({ abi: rpsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"j2Timeout"`.
 */
export function useRpsJ2Timeout<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rpsABI, 'j2Timeout'>['request']['abi'],
        'j2Timeout',
        TMode
      > & { functionName?: 'j2Timeout' }
    : UseContractWriteConfig<typeof rpsABI, 'j2Timeout', TMode> & {
        abi?: never
        functionName?: 'j2Timeout'
      } = {} as any
) {
  return useContractWrite<typeof rpsABI, 'j2Timeout', TMode>({
    abi: rpsABI,
    functionName: 'j2Timeout',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"play"`.
 */
export function useRpsPlay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof rpsABI, 'play'>['request']['abi'], 'play', TMode> & {
        functionName?: 'play'
      }
    : UseContractWriteConfig<typeof rpsABI, 'play', TMode> & {
        abi?: never
        functionName?: 'play'
      } = {} as any
) {
  return useContractWrite<typeof rpsABI, 'play', TMode>({ abi: rpsABI, functionName: 'play', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"solve"`.
 */
export function useRpsSolve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof rpsABI, 'solve'>['request']['abi'], 'solve', TMode> & {
        functionName?: 'solve'
      }
    : UseContractWriteConfig<typeof rpsABI, 'solve', TMode> & {
        abi?: never
        functionName?: 'solve'
      } = {} as any
) {
  return useContractWrite<typeof rpsABI, 'solve', TMode>({ abi: rpsABI, functionName: 'solve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"j1Timeout"`.
 */
export function useRpsJ1Timeout<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof rpsABI, 'j1Timeout'>['request']['abi'],
        'j1Timeout',
        TMode
      > & { functionName?: 'j1Timeout' }
    : UseContractWriteConfig<typeof rpsABI, 'j1Timeout', TMode> & {
        abi?: never
        functionName?: 'j1Timeout'
      } = {} as any
) {
  return useContractWrite<typeof rpsABI, 'j1Timeout', TMode>({
    abi: rpsABI,
    functionName: 'j1Timeout',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rpsABI}__.
 */
export function usePrepareRpsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof rpsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: rpsABI, ...config } as UsePrepareContractWriteConfig<
    typeof rpsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"j2Timeout"`.
 */
export function usePrepareRpsJ2Timeout(
  config: Omit<UsePrepareContractWriteConfig<typeof rpsABI, 'j2Timeout'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: rpsABI, functionName: 'j2Timeout', ...config } as UsePrepareContractWriteConfig<
    typeof rpsABI,
    'j2Timeout'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"play"`.
 */
export function usePrepareRpsPlay(
  config: Omit<UsePrepareContractWriteConfig<typeof rpsABI, 'play'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: rpsABI, functionName: 'play', ...config } as UsePrepareContractWriteConfig<
    typeof rpsABI,
    'play'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"solve"`.
 */
export function usePrepareRpsSolve(
  config: Omit<UsePrepareContractWriteConfig<typeof rpsABI, 'solve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: rpsABI, functionName: 'solve', ...config } as UsePrepareContractWriteConfig<
    typeof rpsABI,
    'solve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link rpsABI}__ and `functionName` set to `"j1Timeout"`.
 */
export function usePrepareRpsJ1Timeout(
  config: Omit<UsePrepareContractWriteConfig<typeof rpsABI, 'j1Timeout'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: rpsABI, functionName: 'j1Timeout', ...config } as UsePrepareContractWriteConfig<
    typeof rpsABI,
    'j1Timeout'
  >)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link rpsABI}__.
 */
export function getRps(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: rpsABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link rpsABI}__.
 */
export function readRps<TAbi extends readonly unknown[] = typeof rpsABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return readContract({ abi: rpsABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link rpsABI}__.
 */
export function writeRps<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof rpsABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof rpsABI, TFunctionName>, 'abi'>
) {
  return writeContract({ abi: rpsABI, ...config } as unknown as WriteContractArgs<typeof rpsABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link rpsABI}__.
 */
export function prepareWriteRps<TAbi extends readonly unknown[] = typeof rpsABI, TFunctionName extends string = string>(
  config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>
) {
  return prepareWriteContract({ abi: rpsABI, ...config } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}
